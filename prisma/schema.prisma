generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  STAFF
  CUSTOMER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  appointments  Appointment[]
  professional  Professional?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Professional {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  specialties String[]
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  services     Service[]
  appointments Appointment[]

  @@map("professionals")
}

model Service {
  id             String   @id @default(cuid())
  name           String
  description    String?
  durationMinutes Int
  price          Float
  professionalId String
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  professional Professional  @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@map("services")
}

model Appointment {
  id             String            @id @default(cuid())
  customerId     String
  professionalId String
  serviceId      String
  startTime      DateTime
  endTime        DateTime
  status         AppointmentStatus @default(PENDING)
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  customer     User         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  service      Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  payment      Payment?

  @@map("appointments")
}

model Payment {
  id            String        @id @default(cuid())
  appointmentId String        @unique
  amount        Float
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("payments")
}
